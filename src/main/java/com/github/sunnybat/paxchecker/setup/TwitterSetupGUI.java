/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.sunnybat.paxchecker.setup;

import com.github.sunnybat.commoncode.error.ErrorBuilder;
import com.github.sunnybat.paxchecker.check.TwitterAccount;
import com.github.sunnybat.paxchecker.check.TwitterAccountAuth;
import com.github.sunnybat.paxchecker.resources.ResourceConstants;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.TimeUnit;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import javax.swing.SwingWorker;
import twitter4j.Twitter;

/**
 *
 * @author SunnyBat
 */
public class TwitterSetupGUI extends com.github.sunnybat.commoncode.javax.swing.JFrame implements TwitterAccountAuth {

    private CountDownLatch authPinCountdown;
    private TwitterAccount myTwitterAccount = new TwitterAccount();
    private final Object authLock = new Object();
    private boolean isAuthenticating;

    /**
     * Creates new form TwitterSetupGUI
     */
    public TwitterSetupGUI() {
        initComponents();
    }

    @Override
    public void authFailure() {
        setPinInputState(false);
        JBAuthenticate.setEnabled(true); // Possible interrupted, so this would be disabled
        JBAuthenticate.setText("Authenticate");
        JTFAuthUrl.setText(null);
    }

    @Override
    public void authSuccess() {
        setPinInputState(false);
        JTFAuthUrl.setText(null);
        JBAuthenticate.setEnabled(false);
        JBAuthenticate.setText("Authenticate");
        JBClearAuthentication.setEnabled(true);
    }

    @Override
    public void setAuthUrl(final String url) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JTFAuthUrl.setText(url);
            }
        });
    }

    @Override
    public void promptForAuthorizationPin() {
        setPinInputState(true);
        authPinCountdown = new CountDownLatch(1);
    }

    @Override
    public String getAuthorizationPin() {
        try {
            if (!authPinCountdown.await(250, TimeUnit.MILLISECONDS)) {
                return null;
            }
        } catch (InterruptedException ex) {
            System.out.println("Interrupted while waiting for PIN input, proceeding");
        }
        String pin = getTextFromComponent(JTFBackupPin);
        setPinInputState(false);
        return pin;
    }

    @Override
    public void updateStatus(final String status) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                JLStatus.setText(status);
            }
        });
    }

    public Twitter getTwitterAccount() {
        return myTwitterAccount.getAccount();
    }

    private void setPinInputState(boolean enabled) {
        JBSubmitPin.setEnabled(enabled);
        JTFBackupPin.setEnabled(enabled);
        JLBackupPin.setEnabled(enabled);
        if (!enabled) {
            JTFBackupPin.setText(null);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        JBAuthenticate = new JButton();
        JBClearAuthentication = new JButton();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        JLStatus = new JLabel();
        jLabel3 = new JLabel();
        JTFAuthUrl = new JTextField();
        JLBackupPin = new JLabel();
        JTFBackupPin = new JTextField();
        JBSubmitPin = new JButton();
        JCBSave = new JButton();
        JCBForcePinAuth = new JCheckBox();

        setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);

        JBAuthenticate.setText("Start Authentication");
        JBAuthenticate.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBAuthenticateActionPerformed(evt);
            }
        });

        JBClearAuthentication.setText("Clear Authentication");
        JBClearAuthentication.setEnabled(false);
        JBClearAuthentication.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBClearAuthenticationActionPerformed(evt);
            }
        });

        jLabel1.setFont(new Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Twitter Setup");

        jLabel2.setText("Status:");

        JLStatus.setText("Not Authenticated");

        jLabel3.setText("Auth URL");

        JTFAuthUrl.setEditable(false);
        JTFAuthUrl.setToolTipText("<html>\n<p width=\"500\">If your default browser does not automatically open up with this URL, you will need to copy+paste this into your browser to continue.<br>\nNote that this URL MUST be opened on this machine if you're not using PIN authentication.<br>\nUse PIN authentication if you're unable to use a browser on this computer.</p>\n</html>");

        JLBackupPin.setText("Backup PIN");
        JLBackupPin.setEnabled(false);

        JTFBackupPin.setEnabled(false);
        JTFBackupPin.addKeyListener(new KeyAdapter() {
            public void keyTyped(KeyEvent evt) {
                JTFBackupPinKeyTyped(evt);
            }
        });

        JBSubmitPin.setText("Submit");
        JBSubmitPin.setEnabled(false);
        JBSubmitPin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBSubmitPinActionPerformed(evt);
            }
        });

        JCBSave.setText("Save");
        JCBSave.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JCBSaveActionPerformed(evt);
            }
        });

        JCBForcePinAuth.setText("Force PIN authentication");
        JCBForcePinAuth.setToolTipText("<html>\n<p width=\"500\">Use this if you need to open the Auth URL on a different computer or if the default method does not work for you.</p>\n</html>");

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTFAuthUrl))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JLBackupPin)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JTFBackupPin)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBSubmitPin))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBAuthenticate)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JBClearAuthentication)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(JCBSave, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(JLStatus, GroupLayout.PREFERRED_SIZE, 339, GroupLayout.PREFERRED_SIZE))
                            .addComponent(JCBForcePinAuth))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(JLStatus))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(JTFAuthUrl, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(JLBackupPin)
                    .addComponent(JTFBackupPin, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                    .addComponent(JBSubmitPin))
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JCBForcePinAuth)
                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(JBAuthenticate)
                    .addComponent(JBClearAuthentication)
                    .addComponent(JCBSave))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JBAuthenticateActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JBAuthenticateActionPerformed
        synchronized (authLock) {
            if (isAuthenticating) {
                JBAuthenticate.setEnabled(false);
                myTwitterAccount.interrupt();
            } else {
                JBAuthenticate.setText("Cancel Auth");
                AuthWorker myAuthWorker = new AuthWorker(this, JCBForcePinAuth.isSelected());
                myAuthWorker.execute();
            }
        }
    }//GEN-LAST:event_JBAuthenticateActionPerformed

    private void JBSubmitPinActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JBSubmitPinActionPerformed
        authPinCountdown.countDown();
    }//GEN-LAST:event_JBSubmitPinActionPerformed

    private void JBClearAuthenticationActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JBClearAuthenticationActionPerformed
        int result = JOptionPane.showConfirmDialog(null,
            "This will clear your saved Twitter credentials, and you will have to log in again through your browser in order to use Twitter. This is not reversible.\r\nAre you sure you want to delete your Twitter credentials?",
            "Delete Credentials",
            JOptionPane.YES_NO_CANCEL_OPTION,
            JOptionPane.WARNING_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            myTwitterAccount.clearAccessToken();
            myTwitterAccount = new TwitterAccount();
            JBAuthenticate.setEnabled(true);
            JBClearAuthentication.setEnabled(false);
            JLStatus.setText("Authentication cleared");
        }
    }//GEN-LAST:event_JBClearAuthenticationActionPerformed

    private void JTFBackupPinKeyTyped(KeyEvent evt) {//GEN-FIRST:event_JTFBackupPinKeyTyped
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            authPinCountdown.countDown();
        }
    }//GEN-LAST:event_JTFBackupPinKeyTyped

    private void JCBSaveActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JCBSaveActionPerformed
        setVisible(false);
        if (myTwitterAccount.getAccount() != null) {
            JLStatus.setText("Authenticated");
        } else {
            JLStatus.setText("Not Authenticated");
        }
    }//GEN-LAST:event_JCBSaveActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton JBAuthenticate;
    private JButton JBClearAuthentication;
    private JButton JBSubmitPin;
    private JCheckBox JCBForcePinAuth;
    private JButton JCBSave;
    private JLabel JLBackupPin;
    private JLabel JLStatus;
    private JTextField JTFAuthUrl;
    private JTextField JTFBackupPin;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JLabel jLabel3;
    // End of variables declaration//GEN-END:variables

    private class AuthWorker extends SwingWorker {

        private TwitterAccountAuth authInterface;
        private boolean forcePinAuth;

        public AuthWorker(TwitterAccountAuth authInterface, boolean forcePinAuth) {
            this.authInterface = authInterface;
            this.forcePinAuth = forcePinAuth;
        }

        @Override
        protected Object doInBackground() throws Exception {
            JCBSave.setEnabled(false);
            synchronized (authLock) {
                isAuthenticating = true;
            }
            myTwitterAccount.authenticate(authInterface, forcePinAuth);
            synchronized (authLock) {
                isAuthenticating = false;
            }
            JCBSave.setEnabled(true);
            return null;
        }

    }

}
