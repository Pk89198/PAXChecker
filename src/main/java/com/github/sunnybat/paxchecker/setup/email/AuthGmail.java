/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.github.sunnybat.paxchecker.setup.email;

import com.github.sunnybat.commoncode.email.account.GmailAccount;
import com.github.sunnybat.commoncode.error.ErrorBuilder;
import com.github.sunnybat.paxchecker.resources.ResourceConstants;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.concurrent.ExecutionException;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingWorker;

/**
 *
 * @author SunnyBat
 */
public class AuthGmail extends javax.swing.JPanel implements AuthEmail {

    private GmailAccount savedGmailAccount;
    private GmailAccount currentGmailAccount;
    private Runnable authCallback;

    /**
     * Creates new form AuthGmail
     */
    public AuthGmail(Runnable authCallback) {
        System.out.println(new java.io.File("").getAbsolutePath());
        this.authCallback = authCallback;
        initComponents();
    }

    @Override
    public void recordCurrentFields() {
        savedGmailAccount = currentGmailAccount;
    }

    @Override
    public void resetChanges() {
        currentGmailAccount = savedGmailAccount;
        updatePanel(isAuthenticated());
    }

    @Override
    public boolean isAuthenticated() {
        return currentGmailAccount != null;
    }

    @Override
    public GmailAccount getEmailAccount() {
        return currentGmailAccount;
    }

    public void authenticate() {
        try {
            authWithoutWait().get();
        } catch (InterruptedException | ExecutionException e) {
        }
    }

    private AuthenticationWorker authWithoutWait() {
        authCallback.run();
        currentGmailAccount = new GmailAccount("PAXChecker", ResourceConstants.RESOURCE_LOCATION, ResourceConstants.CLIENT_SECRET_JSON_PATH);
        JBAuthNow.setEnabled(false);
        JLAuthStatus.setText("<Authenticating>");
        AuthenticationWorker myAuthWorker = new AuthenticationWorker(currentGmailAccount);
        myAuthWorker.execute();
        return myAuthWorker;
    }

    private void updatePanel(boolean authSuccessful) {
        if (authSuccessful) {
            JLAuthStatus.setText("Success");
            JBAuthNow.setText("(Already authenticated)");
            //JBCopyAuthUrl.setEnabled(false);
            JBResetLogin.setEnabled(true);
        } else {
            JLAuthStatus.setText("Failed");
            JBAuthNow.setText("Authenticate");
            currentGmailAccount = null;
            JBAuthNow.setEnabled(true);
            JBCopyAuthUrl.setEnabled(false);
            JBResetLogin.setEnabled(false);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new JLabel();
        JLAuthStatus = new JLabel();
        JBAuthNow = new JButton();
        JBCopyAuthUrl = new JButton();
        JBResetLogin = new JButton();

        setPreferredSize(new Dimension(395, 140));

        jLabel1.setText("Authentication Status:");

        JLAuthStatus.setText("<Not Attempted>");

        JBAuthNow.setText("Authenticate");
        JBAuthNow.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBAuthNowActionPerformed(evt);
            }
        });

        JBCopyAuthUrl.setText("Copy Auth URL");
        JBCopyAuthUrl.setEnabled(false);
        JBCopyAuthUrl.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBCopyAuthUrlActionPerformed(evt);
            }
        });

        JBResetLogin.setText("Reset Login");
        JBResetLogin.setEnabled(false);
        JBResetLogin.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                JBResetLoginActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBAuthNow, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                            .addComponent(JBCopyAuthUrl, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(JBResetLogin, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(JLAuthStatus)
                        .addGap(0, 162, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(JLAuthStatus))
                .addPreferredGap(LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addComponent(JBAuthNow, GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(JBCopyAuthUrl)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(JBResetLogin)))
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JBAuthNowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBAuthNowActionPerformed
        authWithoutWait();
    }//GEN-LAST:event_JBAuthNowActionPerformed

    private void JBCopyAuthUrlActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JBCopyAuthUrlActionPerformed
        // TODO Figure out how to get URL for manual opening =/
    }//GEN-LAST:event_JBCopyAuthUrlActionPerformed

    private void JBResetLoginActionPerformed(ActionEvent evt) {//GEN-FIRST:event_JBResetLoginActionPerformed
        try {
            int result = JOptionPane.showConfirmDialog(null,
                "This will clear your saved Gmail credentials, and you will have to log in again through your browser in order to use the Gmail API email option. This is not reversible.\r\nAre you sure you want to delete your Gmail credentials?",
                "Delete Credentials",
                JOptionPane.YES_NO_CANCEL_OPTION,
                JOptionPane.WARNING_MESSAGE);
            if (result == JOptionPane.YES_OPTION) {
                System.out.println("Delete!");
                currentGmailAccount.deleteCredentials();
                updatePanel(false);
                // TODO Force save all options
            } else {
                System.out.println("No delete");
            }
        } catch (IOException ioe) {
            new ErrorBuilder()
                .setErrorMessage("Unable to delete credentials. If you wish to "
                    + "delete them manually, delete the .credentials folder in "
                    + ResourceConstants.RESOURCE_LOCATION)
                .buildWindow();
        }
    }//GEN-LAST:event_JBResetLoginActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JButton JBAuthNow;
    private JButton JBCopyAuthUrl;
    private JButton JBResetLogin;
    private JLabel JLAuthStatus;
    private JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private class AuthenticationWorker extends SwingWorker<Boolean, Integer> {

        private GmailAccount toCheck;

        public AuthenticationWorker(GmailAccount toCheck) {
            this.toCheck = toCheck;
        }

        @Override
        protected Boolean doInBackground() throws Exception {
            return toCheck.checkAuthentication();
        }

        @Override
        protected void done() {
            try {
                updatePanel(this.get());
            } catch (InterruptedException | ExecutionException e) {
                JLAuthStatus.setText("<Internal error, try again>");
                currentGmailAccount = null;
                JBAuthNow.setEnabled(true);
                JBCopyAuthUrl.setEnabled(false);
                JBResetLogin.setEnabled(false);
            }
            authCallback.run();
        }
    }

}
